openapi: 3.0.3
info:
  title: QRMeat
  description: |-
    QRMeat API specification
  version: 1.0.11
servers:
  - url: api
tags:
  - name: News
    description: Everything related with news
  - name: Stats
    description: Global stats about meat
  - name: Market
    description: Market operations 
  - name: Product In Market
    description: Operations between market and products
  - name: Product
    description: Everything related with meats in the app
  - name: Feedback
    description: Feedback of the meats
  - name: Saved
    description: Stored meats from the user
  - name: User
    description: Informations about the user
  - name: App Config
    description: App configuration
paths:
  /news/trending:
    get:
      tags:
        - News
      summary: get the trending news
      description: ''
      operationId: getTrendingNews
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewsList'          
        '404':
          description: News not found
     
  /news/{id}:
    get:
      tags:
        - News
      summary: Get a specific new
      description: ''
      operationId: getNewsByID
      parameters:
        - name: id
          in: path
          description: Status values that need to be considered for filter
          required: true
          explode: true
          schema:
            type: integer
            example: 54319
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/News'          
        '404':
          description: New not found
  /stats:
    get:
      tags:
        - Stats
      summary: Get Stats
      description: 'Get all stats, positive or negative, of the meats in the app this operation returns Stats Object'
      operationId: getStats
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stats'          
        '404':
          description: Invalid tag value
  /markets:
    get:
      tags:
        - Market
      summary: Get markets
      description: 'Get all market of the aplication this operation returns a List of Markets'
      operationId: getMarkets
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MarketList'          
        '404':
          description: No Markets were found

    
  /markets/{Id}:
    get:
      tags:
        - Market
      summary: get a specific market
      description: 'The operation returns a specific market related to the Id'
      operationId: getMarket
      parameters:
        - name: Id
          in: path
          description: The id of the market
          required: true
          schema:
            type: integer
            format: int64
            example: 54319
      responses:
        '200':
          description: TODO
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Market'
        '404':
          description: Market not found

  /markets/{Id}/categories:
    get:
      tags:
        - Market
      summary: gets the categories of an specific market
      description: 'Using the market id this operations is able to return all the categories of meats present in the specific market'
      operationId: getMarketCategories
      parameters:
        - name: Id
          in: path
          description: The markets Id
          required: true
          schema:
            type: integer
            format: int64
            example: 54319
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Categories'
        '404':
          description: No Categories were found
  /markets/{Id}/categories/{categoryID}:
    get:
      tags:
        - Market
      summary: Gets all the meats present on a market
      description: 'Returns all the meats/Products present on a specific market and from a meat category'
      operationId: getProductsInCategories 
      parameters:
        - name: Id
          in: path
          description: The markets Id
          required: true
          schema:
            type: integer
            format: int64
            example: 54319
        - name: categoryID
          in: path
          description: The Id of the Category
          required: true
          schema:
            type: string
            example: "Cow"
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductList'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
          
  /productInMarket/{marketId}/{productId}:
    get:
      tags:
        - Product In Market
      summary: Get a specific meat that is inside a market 
      description: 'Using the marketId and ProductId returns a specific meat'
      operationId: getProductsInMarket
      parameters:
        - name: marketId
          in: path
          description: The market Id
          required: true
          schema:
            type: integer
            format: int64
            example: 54319
        - name: productId
          in: path
          description: The meat Id
          required: true
          schema:
            type: integer
            format: int64
            example: 3
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
  /product/{meatId}:
    get:
      tags:
        - Product
      summary: Get a product full details
      description: 'Using a meatId get all the information related with a meat'
      operationId: getProduct
      parameters:
        - name: meatId
          in: path
          description: The id of the meat
          required: true
          schema:
            type: integer
            format: int64
            example: 3
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid meat id
        '422':
          description: Validation exception
  /feedback/{meatId}:
    get:
      tags:
        - Feedback
      summary: Get feedback of a meat
      description: 'Using the meat Id gets all the feedback given by other users on the meat'
      operationId: getFeedback
      parameters:
        - name: meatId
          in: path
          description: The id of the meat
          required: true
          schema:
            type: integer
            format: int64
            example: 3
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeedbackList'
        '400':
          description: Invalid meat id
        '422':
          description: Validation exception
    post:
      tags:
        - Feedback
      summary: Create a feedback
      description: 'Using a meat id the user can post his feedback on the meat'
      operationId: createFeedback
      parameters:
        - name: meatId
          in: path
          description: The id of the meat
          required: true
          schema:
            type: integer
            format: int64
            example: 3
      requestBody:
        description: Created feedback object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Feedback'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Feedback'
       
  /saved/{userId}/{productId}:
    post:
      tags:
        - Saved
      summary: Save a feedback
      description: 'Using a userId and a productId the user can save this product on his personal account'
      operationId: saveProduct
      parameters:
        - name: userId
          in: path
          description: The id of the user currently logged on the app
          required: true
          schema:
            type: integer
            format: int64
            example: 1
        - name: productId
          in: path
          description: The id of the meat
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      requestBody:
        description: Created saved object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Saved'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Saved'
  /saved/{userId}:
    get:
      tags:
        - Saved
      summary: get the saved Products
      description: 'Using an userId, the currently logged user can see all the products that he saved'
      operationId: productsSaved
      parameters:
        - name: userId
          in: path
          description:  The id of the user currently logged on the app
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductList'
      
  /user/{userId}:
    get:
      tags:
        - User
      summary: Gets the informations of the logged user
      description: 'Using a userId, the currently logged user can acess all informations related with the application'
      operationId: usersInfo
      parameters:
        - name: userId
          in: path
          description: The id of the user currently logged on the app
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: successful operation
  /appConfig:
    get:
      tags:
        - App Config
      summary: gets apps configuration
      description: 'Gets the app configuration'
      operationId: appConfig
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppConfig'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
    post:
      tags:
        - App Config
      summary: posts the new configuration for the app
      description: 'Saves the app configuration'
      operationId: newAppConfig
      requestBody:
        description: Created new config object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppConfig'
      
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppConfig'
components:
  schemas:
    NewsList:
      type: array
      items:
        $ref: '#/components/schemas/News'
    News:
      type: object
      properties:
        image:
          type: string
          format: uri
          description: URL of the image associated with the news.
        text:
          type: string
          description: Text content of the news.
    Stats:
      type: object
      properties:
        values:
          type: object
          properties:
            positive:
              type: array
              items:
                type: number
            negative:
              type: array
              items:
                type: number
    MarketList:
      type: array
      items:
        $ref: '#/components/schemas/Market'
    Market:
      type: object
      properties:
        name:
          type: string
          description: The name of the market.
        location:
          type: string
          description: The location of the market.
        categories:
          type: array
          items:
            $ref: '#/components/schemas/Categories'
    Categories:
      type: string
      enum:
        - Chicken
        - Cow
        - Pig
        - Lamb
        - Goat
        - Exotic Meats
      description: Enum representing categories of meat.
    ProductList:
      type: array
      items:
        $ref: '#/components/schemas/Product'
    Product:
      type: object
      properties:
        name:
          type: string
          description: The name of the meat.
        price_per_kilo:
          type: number
          description: The price per kilogram of the meat.
        location:
          type: string
          description: markets location.
        details:
          type: string
          description: Short details about the product.
        full_details:
          type: string
          description: Detailed description of the product.
    FeedbackList:
      type: array
      items:
        $ref: '#/components/schemas/Feedback'
    Feedback:
      type: object
      properties:
        username:
          type: string
          description: The name of the person giving feedback.
        star_review:
          type: integer
          minimum: 1
          maximum: 5
          description: The star review rating given by the person, ranging from 1 to 5.
    Saved:
      type: array
      items:
        $ref: '#/components/schemas/Product'
    User:
      type: object
      properties:
        username:
          type: string
          description: The name of the user.
        email:
          type: string
          format: email
          description: The email address of the user.
      required:
        - name
        - email
        
    AppConfig:
      type: object
      properties:
        theme:
          type: string
          description: The theme of the app (e.g., light, dark).
        language:
          type: string
          description: The default language of the app.
        notifications:
          type: boolean
          description: Enable or disable notifications.
        analytics:
          type: boolean
          description: Enable or disable analytics tracking.
        auto_update:
          type: boolean
          description: Enable or disable automatic app updates.
        data_storage:
          type: string
          enum:
            - local
            - cloud
          description: The preferred method of data storage (e.g., local storage, cloud storage).
      required:
        - theme
        - language
        - notifications
        - analytics
        - auto_update
        - data_storage


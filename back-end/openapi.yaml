openapi: 3.0.3
info:
  title: QRMeat
  description: |-
    TODO
  version: 1.0.11
servers:
  - url: api
tags:
  - name: News
    description: Everything about your Pets
  - name: Stats
    description: Access to Petstore orders
  - name: Market
    description: Operations about user
  - name: Product In Market
    description: TODO
  - name: Product
    description: TODO
  - name: Feedback
    description: TODO
  - name: Saved
    description: TODO
  - name: User
    description: TODO
  - name: App Config
    description: TODO
paths:
  /news/trending:
    get:
      tags:
        - News
      summary: TODO
      description: TODO
      operationId: getTrendingNews
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewsList'          
    
        '404':
          description: News not found
     
  /news/{id}:
    get:
      tags:
        - News
      summary: TODO
      description: TODO
      operationId: getNewsByID
      parameters:
        - name: id
          in: path
          description: Status values that need to be considered for filter
          required: true
          explode: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/News'          
        '404':
          description: New not found
  /stats:
    get:
      tags:
        - Stats
      summary: TODO
      description: TODO
      operationId: getStats
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stats'          
        '404':
          description: Invalid tag value
  /markets:
    get:
      tags:
        - Market
      summary: TODO
      description: TODO
      operationId: getMarkets
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MarketList'          
        '404':
          description: No Markets were found

    
  /markets/{Id}:
    get:
      tags:
        - Market
      summary: TODO
      description: ''
      operationId: TODO
      parameters:
        - name: Id
          in: path
          description: TODO
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: TODO
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Market'
        '404':
          description: Market not found

  /markets/{Id}/categories:
    get:
      tags:
        - Market
      summary: TODO
      description: TODO
      operationId: getMarketCategories
      parameters:
        - name: Id
          in: path
          description: TODO
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Categories'
        '404':
          description: No Categories were found
  /markets/{Id}/categories/{categoryID}:
    get:
      tags:
        - Market
      summary: TODO
      description: TODO
      operationId: getProductsInCategories #OLHAR PARA ISTO MELHOR
      parameters:
        - name: Id
          in: path
          description: TODO
          required: true
          schema:
            type: integer
            format: int64
        - name: categoryID
          in: path
          description: TODO
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductList'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
          
  /productInMarket/{marketId}/{productId}:
    get:
      tags:
        - Product In Market
      summary: TODO
      description: TODO
      operationId: getProductsInMarket #OLHAR PARA ISTO MELHOR
      parameters:
        - name: marketId
          in: path
          description: TODO
          required: true
          schema:
            type: integer
            format: int64
        - name: productId
          in: path
          description: TODO
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
  /product/{meatId}:
    get:
      tags:
        - Product
      summary: TODO
      description: TODO
      operationId: getProduct #OLHAR PARA ISTO MELHOR
      parameters:
        - name: meatId
          in: path
          description: TODO
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
  /feedback/{meatId}:
    get:
      tags:
        - Feedback
      summary: TODO
      description: TODO
      operationId: getFeedback #OLHAR PARA ISTO MELHOR
      parameters:
        - name: meatId
          in: path
          description: TODO
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeedbackList'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
    post:
      tags:
        - Feedback
      summary: Create a feedback
      description: TODO
      operationId: createFeedback
      parameters:
        - name: meatId
          in: path
          description: TODO
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Created feedback object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Feedback'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Feedback'
       
  /saved/{userId}/{productId}:
    post:
      tags:
        - Saved
      summary: Save a feedback
      description: TODO.
      operationId: saveProduct
      parameters:
        - name: userId
          in: path
          description: TODO
          required: true
          schema:
            type: integer
            format: int64
        - name: productId
          in: path
          description: TODO
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Created saved object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Saved'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Saved'
  /saved/{userId}:
    get:
      tags:
        - Saved
      summary: get the saved Products
      description: TODO.
      operationId: productsSaved
      parameters:
        - name: userId
          in: path
          description: TODO
          required: true
          schema:
            type: integer
            format: int64
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductList'
      
  /user/{userId}:
    get:
      tags:
        - User
      summary: Gets the informations of the logged user
      description: TODO
      operationId: usersInfo
      parameters:
        - name: userId
          in: path
          description: TODO
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: successful operation
  /appConfig:
    get:
      tags:
        - App Config
      summary: gets apps configuration
      description: ''
      operationId: appConfig
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/appConfig'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
    post:
      tags:
        - App Config
      summary: posts the new configuration for the app
      description: ''
      operationId: newAppConfig
      requestBody:
        description: Created new config object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/appConfig'
      
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/appConfig'
components:
  schemas:
    NewsList:
      type: object
    News:
      type: object
    Stats:
      type: object
    MarketList:
      type: object
    Market:
      type: object
    Categories:
      type: object
    ProductList:
      type: object
    Product:
      type: object
    FeedbackList:
      type: object
    Feedback:
      type: object
    Saved:
      type: object
    User:
      type: object
    appConfig:
      type: object

